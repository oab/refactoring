module HideDelegate;

import * from CogTracking;

interface ClientI {
    Unit enquire(SeenCogs x_s, Bool rem);
}

interface PersonI {
  DeptI getDept(SeenCogs x_s);
}

interface DeptI {
  PersonI getManager(SeenCogs x_s);
  Unit setManager(SeenCogs x_s, PersonI m);
}

class Person(CogId x_i, CogMap x_m, DeptI d) implements PersonI {
  {  x_m.add(this,x_i); } 
  
  DeptI getDept(SeenCogs x_s) {
    CogId x_i = x_m.lookup(this);
    x_s = insertElement(x_s,x_i);    
    return d;
  }
}

class Dept(CogId x_i, CogMap x_m) implements DeptI {
  PersonI m;
  {  x_m.add(this,x_i); } 

  PersonI getManager(SeenCogs x_s) {
    CogId x_i = x_m.lookup(this);
    x_s = insertElement(x_s,x_i);    
    return m;
  }
  Unit setManager(SeenCogs x_s, PersonI p) {
    CogId x_i = x_m.lookup(this);
    x_s = insertElement(x_s,x_i);    
    m = p;
  }
}

class Client(CogId x_i, CogMap x_m) implements ClientI {
  {  x_m.add(this,x_i); } 

  Unit enquire(SeenCogs x_s, Bool remote) {
    CogId x_i = x_m.lookup(this);
    x_s = insertElement(x_s,x_i);
      
    DeptI d;
    
    if ( remote ) {
      CogId x_fresh0 = x_m.freshCogId();
      d = new Dept(x_fresh0, x_m);
    } else {
      d = new local Dept(x_i, x_m);
    }
    
    CogId x_fresh1 = x_m.freshCogId();
    PersonI m = new Person(x_fresh1, x_m, d);
    
    CogId x_fresh2 = x_m.freshCogId();
    PersonI p = new Person(x_fresh2, x_m, d);
    
    d.setManager(x_s,m);
    
    /* Client -> Person; Client -> Department */
    d = p.getDept(x_s);
    m = d.getManager(x_s);
  }
}

{
  CogMap x_m = new CogMapper();
  CogId x_i = x_m.freshCogId();
  
  CogId x_fresh = x_m.freshCogId();
  ClientI c = new Client(x_fresh, x_m);
  c.enquire(set[],False);
}

