module HideDelegate;

import * from DeadlockChecking;

interface ClientI {
    Unit enquire(Rel w4, Bool rem);
}

interface PersonI {
  DeptI getDept(Rel w4);
}

interface DeptI {
  PersonI getManager(Rel w4);
  Unit setManager(Rel w4, PersonI m);
}

class Person(CogId x_i, CogMap cogs, DeptI d) implements PersonI {
  {  cogs.add(this,x_i); } 
  
  DeptI getDept(Rel w4) {
    return d;
  }
}

class Dept(CogId thisCogId, CogMap cogs) implements DeptI {
  PersonI m;
  {  cogs.add(this,thisCogId); } 

  PersonI getManager(Rel w4) {
    return m;
  }
  Unit setManager(Rel w4, PersonI p) {
    m = p;
  }
}

class Client(CogId thisCogId, CogMap cogs) implements ClientI {
  {  cogs.add(this,thisCogId); } 

  Unit enquire(Rel w4, Bool remote) {
    DeptI d;
    
    if ( remote ) {
      CogId fresh0 = cogs.freshCogId();
      d = new Dept(fresh0, cogs);
    } else {
      d = new local Dept(thisCogId, cogs);
    }
    
    CogId fresh1 = cogs.freshCogId();
    PersonI m = new Person(fresh1, cogs, d);
    
    CogId fresh2 = cogs.freshCogId();
    PersonI p = new Person(fresh2, cogs, d);
    
    d.setManager(w4,m);
    
    /* Client -> Person; Client -> Department */
    d = p.getDept(w4);
    m = d.getManager(w4);
  }
}

{
  CogMap cogs = new CogMapper();
  CogId cog0 = cogs.freshCogId();
  
  CogId fresh = cogs.freshCogId();
  ClientI c = new Client(fresh, cogs);
  c.enquire(set[],False);
}

