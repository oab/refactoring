module WaitFor;
export *;

type Node = Int;
type Rel = Set<Pair<Node,Node>>;
type NodeSet = Set<Node>;
type NodeList = List<Node>;
type Edge = Pair<Node,Node>;
    
def Rel add(Rel w4, Edge e) =
 when fst(e) == snd(e)
 then w4
 else insertElement(w4,e);
        
def Rel rem(Rel w4, Edge e) =
    remove(w4,e);

def Pair<NodeSet,NodeSet> extract(Rel w4) = extract_helper(w4,set[],set[]);
def Pair<NodeSet,NodeSet> extract_helper(Rel w4, NodeSet l, NodeSet r) =
  when hasNext(w4)
  then case next(w4) {
    Pair(w4subset,e) => extract_helper(w4subset,insertElement(l,fst(e)),insertElement(r,snd(e)))
  }
  else Pair(l,r);

def Pair<Rel,NodeSet> partition(Rel w4,Int n) = partition_helper(w4,n,set[],set[]);
def Pair<Rel,NodeSet> partition_helper(Rel w4, Int n, Rel no_nm, NodeSet m_in_nm) =
  when hasNext(w4)
  then case next(w4) {
    Pair(w4subset,e) => when fst(e) != n
                        then partition_helper(w4subset,n,insertElement(no_nm,e),m_in_nm)
                        else partition_helper(w4subset,n,no_nm,insertElement(m_in_nm,snd(e)))
    }
 else Pair(no_nm,m_in_nm);

def NodeSet no_incoming(Rel w4) =
  case extract(w4) {
    Pair(l,r) => difference(l,r)
  };

def Bool has_incoming(Rel w4, Int n) =
  when hasNext(w4)
  then case next(w4)  {
    Pair(w4subset,edge) => snd(edge) == n || has_incoming(w4subset,n)
  }
  else False;

def NodeSet update(Rel w4, NodeSet s, NodeSet m) =
  when hasNext(m) 
  then case next(m) {
   Pair(msubset,e) => when has_incoming(w4,e)
                      then update(w4,s,msubset)
                      else update(w4,insertElement(s,e),msubset)    
   }
   else s;


def Maybe<NodeList> toposort(Rel w4) = toposort_helper(w4,list[],no_incoming(w4));
def Maybe<NodeList> toposort_helper(Rel w4, NodeList sorted, NodeSet non_incoming) =
    when emptySet(non_incoming)
    then when emptySet(w4)
         then Just(sorted)
         else Nothing
    else let (Node n) = take(non_incoming)
         in case partition(w4,n) {
           Pair(no_nm, m_in_nm) =>
             let (NodeSet new_non_incoming) = update(no_nm, remove(non_incoming, n), m_in_nm)
             in toposort_helper(no_nm, Cons(n, sorted), new_non_incoming)
           };


// Cycle detection by finding a topological sort
// a practical version of this should be incremental
// i.e. maintain additional state in w4 so we do not
// do so much work at each callsite
def Bool cyclefree(Rel w4) =
  case toposort(w4) {
     Nothing => False |
      _ => True
    };

