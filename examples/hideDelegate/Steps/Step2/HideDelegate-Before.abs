module HideDelegate;

import * from CogTracking;

interface ClientI {
    Unit enquire(SeenCogs x_s, Bool rem);
}

interface PersonI {
  DeptI getDept(SeenCogs x_s);
}

interface DeptI {
  PersonI getManager(SeenCogs x_s);
  Unit setManager(SeenCogs x_s, PersonI m);
}

class Person(Bool x_fresh, CogMap x_m, Object x_parent, DeptI d) implements PersonI {
  {
    if(x_fresh) {
      x_m.addFresh(this);
    } else {
      x_m.addSame(this,x_parent);
    }
  }
  DeptI getDept(SeenCogs x_s) {
    CogId x_i = x_m.lookup(this);
    x_s = insertElement(x_s,x_i);    
    return d;
  }
}

class Dept(Bool x_fresh, CogMap x_m, Object x_parent) implements DeptI {
  PersonI m;
  {
    if(x_fresh) {
      x_m.addFresh(this);
    } else {
      x_m.addSame(this,x_parent);
    }
  }

  PersonI getManager(SeenCogs x_s) {
    CogId x_i = x_m.lookup(this);
    x_s = insertElement(x_s,x_i);    
    return m;
  }
  Unit setManager(SeenCogs x_s, PersonI p) {
    CogId x_i = x_m.lookup(this);
    x_s = insertElement(x_s,x_i);    
    m = p;
  }
}

class Client(Bool x_fresh, CogMap x_m, Object x_parent) implements ClientI {
  {
    if(x_fresh) {
      x_m.addFresh(this);
    } else {
      x_m.addSame(this,x_parent);
    }
  }

  Unit enquire(SeenCogs x_s, Bool remote) {
    CogId x_i = x_m.lookup(this);
    x_s = insertElement(x_s,x_i);
      
    DeptI d;
    
    if ( remote ) {
      d = new Dept(True, x_m, this);
    } else {
      d = new local Dept(False, x_m, this);
    }
    
    PersonI m = new Person(True, x_m, this, d);
    PersonI p = new Person(True, x_m, this, d);
    d.setManager(x_s,m);
    
    /* Client -> Person; Client -> Department */
    d = p.getDept(x_s);
    m = d.getManager(x_s);
  }
}

{
  CogMap x_m = new CogMapper();
  x_m.addFresh(null);
  
  ClientI c = new Client(True,x_m,null);
  c.enquire(set[],False);
}

