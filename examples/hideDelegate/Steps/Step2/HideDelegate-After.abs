module HideDelegate;

import * from CogTracking;

interface ClientI {
    Unit enquire(SeenCogs s, Bool rem);
}

interface PersonI {
  DeptI getDept(SeenCogs s);
  PersonI getManager(SeenCogs s);
}

interface DeptI {
  PersonI getManager(SeenCogs s);
  Unit setManager(SeenCogs s, PersonI m);
}

class Person(Bool x_fresh, CogMap x_m, Object x_parent, DeptI d) implements PersonI {
  {
    if(x_fresh) {
      x_m.addFresh(this);
    } else {
      x_m.addSame(this,x_parent);
    }
  }

  DeptI getDept(SeenCogs s) {
    CogId i = x_m.lookup(this);
    s = insertElement(s,i);   
    return d;
  }
  
  PersonI getManager(SeenCogs s) {
    CogId i = x_m.lookup(this);
    s = insertElement(s,i);  
    DeptI temp = this.getDept(s);
    return temp.getManager(s);
  }
}

class Dept(Bool x_fresh, CogMap x_m, Object x_parent) implements DeptI {
  PersonI m;
  {
   if(x_fresh) {
      x_m.addFresh(this);
    } else {
      x_m.addSame(this,x_parent);
    }
  }
  
  PersonI getManager(SeenCogs s) {
    CogId i = x_m.lookup(this);
    s = insertElement(s,i);   
    return this.m;
  }
  Unit setManager(SeenCogs s, PersonI p) {
    CogId i = x_m.lookup(this);
    s = insertElement(s,i);  
    this.m = p;
  }
}

class Client(Bool x_fresh, CogMap x_m, Object x_parent) implements ClientI {
  {
    if(x_fresh) {
      x_m.addFresh(this);
    } else {
      x_m.addSame(this,x_parent);
    }
  }

    
  Unit enquire(SeenCogs s, Bool remote) {
    CogId i = x_m.lookup(this);
    s = insertElement(s,i);  

    DeptI d;

    if ( remote ) {
      d = new Dept(True, x_m, this);
    } else {
      d = new local Dept(False, x_m, this);
    }
    
    PersonI m = new Person(True, x_m, this, d);
    PersonI p = new Person(True, x_m, this, d);

    d.setManager(s,m);
    m = p.getManager(s);
  }
}

{
  CogMap x_m = new CogMapper();
  x_m.addFresh(null);
  
  ClientI c = new Client(True,x_m,null);
  c.enquire(set[],False);
}
